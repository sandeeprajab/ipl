{"version":3,"sources":["Album.js","App.js","serviceWorker.js","index.js"],"names":["Album","props","getTeamPlayerDetails","teamName","handleOpen","setState","showTeamPlayerModal","handleClose","renderModal","type","onClick","Modal","aria-labelledby","aria-describedby","open","onClose","className","classes","paper","id","state","teamStats","teamPlayerDetails","fetch","then","response","json","data","console","log","map","teamStat","Grid","item","key","xs","sm","md","Card","card","CardContent","cardContent","Typography","gutterBottom","variant","component","team_name","player_count","player_rating","parseInt","CardActions","Button","size","color","catch","err","Fragment","CssBaseline","AppBar","position","Toolbar","noWrap","Container","this","cardGrid","maxWidth","container","spacing","footer","align","React","Component","App","makeStyles","theme","icon","marginRight","heroContent","backgroundColor","palette","background","padding","heroButtons","marginTop","paddingTop","paddingBottom","height","display","flexDirection","cardMedia","flexGrow","width","border","boxShadow","shadows","useStyles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ad1a56a.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport './styles/styles.css'\r\nimport { Modal } from '@material-ui/core';\r\n\r\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nclass Album extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = \r\n        {\r\n            teamStats: [],\r\n            showTeamPlayerModal: false,\r\n            teamPlayerDetails: {},\r\n        };\r\n    }\r\n    getTeamPlayerDetails = teamName => {\r\n        \r\n    }\r\n    componentDidMount() {\r\n      // this.state.loading: true;\r\n      fetch('https://vast-earth-90578.herokuapp.com/getTeamsStats')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Work with JSON data here\r\n        console.log(data);\r\n        let teamStats = data.map(teamStat => {\r\n            return (<Grid item key={teamStat} xs={12} sm={6} md={4}>\r\n              <Card className={this.props.classes.card}>\r\n                <CardContent className={this.props.classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                    {teamStat.team_name}\r\n                  </Typography>\r\n                  <Typography>\r\n                    Player Count: {teamStat.player_count || 'NA'}\r\n                  </Typography>\r\n                  <Typography>\r\n                    Average Player Rating: {teamStat.player_rating ? parseInt(teamStat.player_rating) : 'NA'}\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Button size=\"small\" color=\"primary\" onClick={this.getTeamPlayerDetails(teamStat.team_name)}>\r\n                    View\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>)\r\n        });\r\n          this.setState({\r\n            teamStats: teamStats\r\n          });\r\n      })\r\n      .catch(err => {\r\n        console.log('error occurred',err);\r\n      })\r\n    }\r\n    \r\n    handleOpen = () => {\r\n        this.setState({\r\n            showTeamPlayerModal: true\r\n        });\r\n      };\r\n    \r\n      handleClose = () => {\r\n        this.setState({\r\n            showTeamPlayerModal: false\r\n        });\r\n      };\r\n    renderModal = \r\n        ( <div>\r\n            <button type=\"button\" onClick={this.handleOpen}>\r\n              Open Modal\r\n            </button>\r\n            <Modal\r\n              aria-labelledby=\"simple-modal-title\"\r\n              aria-describedby=\"simple-modal-description\"\r\n              open={this.showTeamPlayerModal}\r\n              onClose={this.handleClose}\r\n            >\r\n              <div className={this.props.classes.paper}>\r\n                <h2 id=\"simple-modal-title\">Text in a modal</h2>\r\n                <p id=\"simple-modal-description\">\r\n                  Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\r\n                </p>\r\n              </div>\r\n            </Modal>\r\n          </div>\r\n          );\r\n\r\n  render () {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          {/* <CameraIcon className={this.props.classes.icon} /> */}\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            IPL Auction\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        {/* Hero unit */}\r\n        {/* <div className={this.props.classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Album layout\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n              Something short and leading about the collection belowâ€”its contents, the creator, etc.\r\n              Make it short and sweet, but not too short so folks don&apos;t simply skip over it\r\n              entirely.\r\n            </Typography>\r\n            <div className={this.props.classes.heroButtons}>\r\n              <Grid container spacing={2} justify=\"center\">\r\n                <Grid item>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Main call to action\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button variant=\"outlined\" color=\"primary\">\r\n                    Secondary action\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Container>\r\n        </div> */}\r\n        <Container className={this.props.classes.cardGrid} maxWidth=\"md\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4}>\r\n            {this.state.teamStats}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n      {/* Footer */}\r\n      <footer className={this.props.classes.footer}>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        With &lt;3\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        Fun @ Work Team\r\n        </Typography>\r\n      </footer>\r\n      {/* End footer */}\r\n      {this.showTeamPlayerModal && this.renderModal}\r\n    </React.Fragment>\r\n  );\r\n    }\r\n}\r\nexport default Album;\r\nconst colorCode = [\r\n    {\r\n        id: 1,\r\n        colorCode: '#3342ff'\r\n    },\r\n    {\r\n        id: 2,\r\n        colorCode: '#ff5533'\r\n    },\r\n    {\r\n        id: 3,\r\n        colorCode: '#9f7168'\r\n    },\r\n    {\r\n        id: 4,\r\n        colorCode: '#4f1105'\r\n    },\r\n    {\r\n        id: 5,\r\n        colorCode: '#ee7962'\r\n    },\r\n    {\r\n        id: 6,\r\n        colorCode: '#c2aeaa'\r\n    },\r\n    {\r\n        id: 7,\r\n        colorCode: '#4ff016'\r\n    },\r\n    {\r\n        id: 8,\r\n        colorCode: '#20f4e4'\r\n    },\r\n    {\r\n        id: 9,\r\n        colorCode: '#ee47f0'\r\n    },\r\n    {\r\n        id: 10,\r\n        colorCode: '#ec2341'\r\n    },\r\n];","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Album from './Album';\nimport { makeStyles } from '@material-ui/core';\n\nfunction App() {\n  const useStyles = makeStyles(theme => ({\n    icon: {\n      marginRight: theme.spacing(2),\n    },\n    heroContent: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n      marginTop: theme.spacing(4),\n    },\n    cardGrid: {\n      paddingTop: theme.spacing(8),\n      paddingBottom: theme.spacing(8),\n    },\n    card: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    cardMedia: {\n      paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n      flexGrow: 1,\n    },\n    footer: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(6),\n    },\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  }));\n  const classes=useStyles();\n  return <Album classes={classes} />  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}