{"version":3,"sources":["Album.js","App.js","serviceWorker.js","index.js"],"names":["Album","props","getTeamStats","fetch","then","response","console","log","json","data","catch","err","state","teamStats","Fragment","CssBaseline","AppBar","position","Toolbar","Typography","variant","color","noWrap","Container","className","this","classes","cardGrid","maxWidth","Grid","container","spacing","map","teamStat","item","key","xs","sm","md","Card","card","CardContent","cardContent","gutterBottom","component","team_name","player_count","player_rating","CardActions","Button","size","footer","align","React","Component","App","makeStyles","theme","icon","marginRight","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","paddingTop","paddingBottom","height","display","flexDirection","cardMedia","flexGrow","useStyles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8YA8HeA,G,kBA1GX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAGVC,aAAe,WACX,OAAOC,MAAM,mBACdC,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAKF,EAASG,QACfH,EAASG,UAEjBJ,MAAK,SAAAK,GAEJH,QAAQC,IAAIE,MAEbC,OAAM,SAAAC,GACLL,QAAQC,IAAI,sBAbZ,EAAKK,MAAQ,CAACC,UAAW,IAFV,E,mHAwBV,IAAD,OACV,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,YACf,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,QAAM,GAA/C,kBAKJ,8BA4BE,kBAACC,EAAA,EAAD,CAAWC,UAAWC,KAAKxB,MAAMyB,QAAQC,SAAUC,SAAS,MAE1D,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACtBN,KAAKb,MAAMC,UAAUmB,KAAI,SAAAC,GAAQ,OAChC,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAKF,EAAUG,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3C,kBAACC,EAAA,EAAD,CAAMf,UAAW,EAAKvB,MAAMyB,QAAQc,MAClC,kBAACC,EAAA,EAAD,CAAajB,UAAW,EAAKvB,MAAMyB,QAAQgB,aACzC,kBAACvB,EAAA,EAAD,CAAYwB,cAAY,EAACvB,QAAQ,KAAKwB,UAAU,MAC7CX,EAASY,WAEZ,kBAAC1B,EAAA,EAAD,sBACiBc,EAASa,cAE1B,kBAAC3B,EAAA,EAAD,+BAC0Bc,EAASc,gBAGrC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQ7B,MAAM,WAA3B,iBAWd,4BAAQG,UAAWC,KAAKxB,MAAMyB,QAAQyB,QACpC,kBAAChC,EAAA,EAAD,CAAYC,QAAQ,YAAYgC,MAAM,SAAS/B,MAAM,gBAAgBuB,UAAU,KAA/E,WAGA,kBAACzB,EAAA,EAAD,CAAYC,QAAQ,YAAYgC,MAAM,SAAS/B,MAAM,gBAAgBuB,UAAU,KAA/E,yB,GAnGYS,IAAMC,Y,QCuBXC,MAnCf,WACE,IA+BM7B,EA/BY8B,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,YAAaF,EAAM1B,QAAQ,IAE7B6B,YAAa,CACXC,gBAAiBJ,EAAMK,QAAQC,WAAWC,MAC1CC,QAASR,EAAM1B,QAAQ,EAAG,EAAG,IAE/BmC,YAAa,CACXC,UAAWV,EAAM1B,QAAQ,IAE3BJ,SAAU,CACRyC,WAAYX,EAAM1B,QAAQ,GAC1BsC,cAAeZ,EAAM1B,QAAQ,IAE/BS,KAAM,CACJ8B,OAAQ,OACRC,QAAS,OACTC,cAAe,UAEjBC,UAAW,CACTL,WAAY,UAEd1B,YAAa,CACXgC,SAAU,GAEZvB,OAAQ,CACNU,gBAAiBJ,EAAMK,QAAQC,WAAWC,MAC1CC,QAASR,EAAM1B,QAAQ,OAGb4C,GACd,OAAO,kBAAC,EAAD,CAAOjD,QAASA,KC3BLkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnF,MAAK,SAAAoF,GACjCA,EAAaC,kB","file":"static/js/main.5e7b4cf2.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport './styles/styles.css'\r\n\r\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\nclass Album extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {teamStats: [] };\r\n    }\r\n    getTeamStats = () => {\r\n        return fetch('./getTeamsStats')\r\n      .then(response => {\r\n        console.log( response.json());\r\n        return response.json()\r\n      })\r\n      .then(data => {\r\n        // Work with JSON data here\r\n        console.log(data)\r\n      })\r\n      .catch(err => {\r\n        console.log('error occurred');\r\n      })\r\n    }\r\n    componentDidMount() {\r\n      // this.state.loading: true;\r\n      /* this.setState({\r\n        teamStats: this.getTeamStats()\r\n      }); */\r\n  }\r\n  render () {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          {/* <CameraIcon className={this.props.classes.icon} /> */}\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Album layout\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        {/* Hero unit */}\r\n        {/* <div className={this.props.classes.heroContent}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n              Album layout\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n              Something short and leading about the collection belowâ€”its contents, the creator, etc.\r\n              Make it short and sweet, but not too short so folks don&apos;t simply skip over it\r\n              entirely.\r\n            </Typography>\r\n            <div className={this.props.classes.heroButtons}>\r\n              <Grid container spacing={2} justify=\"center\">\r\n                <Grid item>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Main call to action\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button variant=\"outlined\" color=\"primary\">\r\n                    Secondary action\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Container>\r\n        </div> */}\r\n        <Container className={this.props.classes.cardGrid} maxWidth=\"md\">\r\n          {/* End hero unit */}\r\n          <Grid container spacing={4}>\r\n            {this.state.teamStats.map(teamStat => (\r\n              <Grid item key={teamStat} xs={12} sm={6} md={4}>\r\n                <Card className={this.props.classes.card}>\r\n                  <CardContent className={this.props.classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h3\" component=\"h2\">\r\n                      {teamStat.team_name}\r\n                    </Typography>\r\n                    <Typography>\r\n                      Player Count: {teamStat.player_count}\r\n                    </Typography>\r\n                    <Typography>\r\n                      Average Player Rating: {teamStat.player_rating}\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    <Button size=\"small\" color=\"primary\">\r\n                      View\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n      {/* Footer */}\r\n      <footer className={this.props.classes.footer}>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        With &lt;3\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\r\n        Fun @ Work Team\r\n        </Typography>\r\n      </footer>\r\n      {/* End footer */}\r\n    </React.Fragment>\r\n  );\r\n    }\r\n}\r\nexport default Album;\r\nconst colorCode = [\r\n    {\r\n        id: 1,\r\n        colorCode: '#3342ff'\r\n    },\r\n    {\r\n        id: 2,\r\n        colorCode: '#ff5533'\r\n    },\r\n    {\r\n        id: 3,\r\n        colorCode: '#9f7168'\r\n    },\r\n    {\r\n        id: 4,\r\n        colorCode: '#4f1105'\r\n    },\r\n    {\r\n        id: 5,\r\n        colorCode: '#ee7962'\r\n    },\r\n    {\r\n        id: 6,\r\n        colorCode: '#c2aeaa'\r\n    },\r\n    {\r\n        id: 7,\r\n        colorCode: '#4ff016'\r\n    },\r\n    {\r\n        id: 8,\r\n        colorCode: '#20f4e4'\r\n    },\r\n    {\r\n        id: 9,\r\n        colorCode: '#ee47f0'\r\n    },\r\n    {\r\n        id: 10,\r\n        colorCode: '#ec2341'\r\n    },\r\n];","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Album from './Album';\nimport { makeStyles } from '@material-ui/core';\n\nfunction App() {\n  const useStyles = makeStyles(theme => ({\n    icon: {\n      marginRight: theme.spacing(2),\n    },\n    heroContent: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(8, 0, 6),\n    },\n    heroButtons: {\n      marginTop: theme.spacing(4),\n    },\n    cardGrid: {\n      paddingTop: theme.spacing(8),\n      paddingBottom: theme.spacing(8),\n    },\n    card: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    cardMedia: {\n      paddingTop: '56.25%', // 16:9\n    },\n    cardContent: {\n      flexGrow: 1,\n    },\n    footer: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(6),\n    },\n  }));\n  const classes=useStyles();\n  return <Album classes={classes} />  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}